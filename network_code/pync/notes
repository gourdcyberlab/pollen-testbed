so right now we have two threads: one for listening, and one for talking. what
we want to happen is for the talking to read input and send it on newline, and
the listening one to read until it gets a partial buffer (one not completely
filled) and then print it. when either one gets an EOF, they should exit...

what should happen is that when the connection is closed, both exit? how would
each one know when we get an EOF? we can't do a non-blocking recv in the
talker, because it would get nothing but empty strings, and we get nothing. i
think the only way it would work is to communicate between the threads to die.
the thing is, they are both blocking, waiting for input, so they can't check
for a 'done' flag. 

...

could we set them up as our own thread objects, and then use that event trick
to let them communicate? why is this so fucking complicated :/ threads and
sockets: two shitty low-level interfaces i'd just rather not mess with. and
yet, here I am.

...

ok, update: using 'select' now. sooooo much simpler. we've got it working
pretty much just like we want it to, just messing around with the control
structure. let's take it from the top

    file:
    if invoked as script, run main

    main:
    branch for server
        branch for persistant
            loop until... EOF? KeyboardInterrupt?
        either way, need to close server socket
    branch for client

    connect:
    start errorcatching block
        loop until 'done'
            get io object(s) ready for reading
            for each object
                branch for socket, stdin
    error or not...
        close socket

everything else is pretty much trivial. just looking for a nice way to do all
this.

If we could know for a fact... wait... if we don't use something, it will
remain in the select buffer... we can simplify this. Still could use some
streamlining in the main function. we'll get to that.

also: added a nice long comment talking about the 'select' function call
